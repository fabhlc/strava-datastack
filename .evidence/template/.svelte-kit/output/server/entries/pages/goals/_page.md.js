import{s as N,b as $,a as tt}from"../../../chunks/utils.js";import{c as M,h as T,v as c,d as g,o as Y,s as et}from"../../../chunks/ssr.js";import"dequal";import{l as z,M as at}from"../../../chunks/VennDiagram.svelte_svelte_type_style_lang.js";import{w as ot}from"../../../chunks/index2.js";import"clsx";import{Q as O,p as rt,a as U}from"../../../chunks/stores.js";import{h as j,p as it}from"../../../chunks/profile.js";import{a as Q}from"../../../chunks/index5.js";import{p as lt}from"../../../chunks/stores2.js";import{c as G,g as Z,l as nt,a as st,e as ct,V as mt,Q as P,h as q,i as H,E as dt,B as X,k as ut,C as vt}from"../../../chunks/DownloadData.js";import"ssf";import"@tidyjs/tidy";import"deep-object-diff";import"chroma-js";import"@uwdata/mosaic-sql";import"export-to-csv";import"echarts";import"@evidence-dev/universal-sql/client-duckdb";import"yaml";import"@astronautlabs/jsonpath";import"tua-body-scroll-lock";import"lodash/merge.js";import{Q as L}from"../../../chunks/QueryViewer.js";import"prismjs";import"debounce";import"downloadjs";import{S as _t,D as yt}from"../../../chunks/_Sparkline.js";import"echarts-stat";const At={code:".placeholder.svelte-1qvl5jp.svelte-1qvl5jp{display:inline;position:relative;cursor:help;color:var(--base-content-muted)}.placeholder.svelte-1qvl5jp .error-msg.svelte-1qvl5jp{display:none;position:absolute;top:-5px;left:105%;max-width:400px;min-width:150px;padding-left:5px;padding-right:5px;padding-top:2px;padding-bottom:1px;font-size:0.8em;color:var(--base-content);background-color:var(--base-200);border:1px solid var(--base-300);border-radius:6px;z-index:1;word-wrap:break-word}.placeholder.svelte-1qvl5jp:hover .error-msg.svelte-1qvl5jp{display:inline}",map:`{"version":3,"file":"_Value.svelte","sources":["_Value.svelte"],"sourcesContent":["<script>\\n\\timport getColumnSummary from '@evidence-dev/component-utilities/getColumnSummary';\\n\\timport {\\n\\t\\tformatValue,\\n\\t\\tgetFormatObjectFromString\\n\\t} from '@evidence-dev/component-utilities/formatting';\\n\\timport { convertColumnToDate } from '@evidence-dev/component-utilities/dateParsing';\\n\\timport checkInputs from '@evidence-dev/component-utilities/checkInputs';\\n\\timport ValueError from './ValueError.svelte';\\n\\timport { strictBuild } from '@evidence-dev/component-utilities/chartContext';\\n\\timport { getThemeStores } from '../../../themes/themes.js';\\n\\n\\tconst { resolveColor } = getThemeStores();\\n\\n\\t// Passing in value from dataset:\\n\\texport let data = null;\\n\\texport let row = 0;\\n\\texport let column = null;\\n\\n\\t// alias for column\\n\\texport let value = null;\\n\\t$: if (value && column) {\\n\\t\\tconsole.warn(\\n\\t\\t\\t'Both \\"value\\" and \\"column\\" were supplied as props to Value. \\"value\\" will be ignored.'\\n\\t\\t);\\n\\t}\\n\\t$: column = column ?? value;\\n\\n\\t// Placeholder text when data not supplied:\\n\\texport let placeholder = null;\\n\\n\\t// Value Formatting:\\n\\texport let fmt = undefined;\\n\\tlet format_object;\\n\\n\\tlet selected_value;\\n\\tlet error;\\n\\n\\t// Value Styling Props:\\n\\texport let color = undefined;\\n\\t$: colorStore = resolveColor(color);\\n\\n\\tlet fontColor = '';\\n\\t// Negative value font color:\\n\\texport let redNegatives = false;\\n\\t$: redNegatives = redNegatives === 'true' || redNegatives === true;\\n\\n\\t$: if (redNegatives || $colorStore) {\\n\\t\\tif (redNegatives && selected_value < 0) {\\n\\t\\t\\tfontColor = 'rgb(220 38 38)';\\n\\t\\t} else if ($colorStore) {\\n\\t\\t\\tfontColor = $colorStore;\\n\\t\\t}\\n\\t}\\n\\n\\tlet columnSummary;\\n\\t$: {\\n\\t\\ttry {\\n\\t\\t\\terror = undefined;\\n\\t\\t\\tif (!placeholder) {\\n\\t\\t\\t\\tif (data) {\\n\\t\\t\\t\\t\\tif (typeof data == 'string') {\\n\\t\\t\\t\\t\\t\\tthrow Error(\`Received: data=\${data}, expected: data={\${data}}\`);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (!Array.isArray(data)) {\\n\\t\\t\\t\\t\\t\\t// Accept bare objects\\n\\t\\t\\t\\t\\t\\tdata = [data];\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (isNaN(row)) {\\n\\t\\t\\t\\t\\t\\tthrow Error('row must be a number (row=' + row + ')');\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tObject.keys(data[row])[0];\\n\\t\\t\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\t\\t\\tthrow Error('Row ' + row + ' does not exist in the dataset');\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tcolumn = column ?? Object.keys(data[row])[0];\\n\\n\\t\\t\\t\\t\\tcheckInputs(data, [column]);\\n\\n\\t\\t\\t\\t\\tcolumnSummary = getColumnSummary(data, 'array');\\n\\n\\t\\t\\t\\t\\tconst dateCols = columnSummary\\n\\t\\t\\t\\t\\t\\t.filter((d) => d.type === 'date' && !(data[0]?.[d.id] instanceof Date))\\n\\t\\t\\t\\t\\t\\t.map((d) => d.id);\\n\\n\\t\\t\\t\\t\\tfor (let i = 0; i < dateCols.length; i++) {\\n\\t\\t\\t\\t\\t\\tdata = convertColumnToDate(data, dateCols[i]);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tselected_value = data[row][column];\\n\\t\\t\\t\\t\\tcolumnSummary = columnSummary.filter((d) => d.id === column);\\n\\t\\t\\t\\t\\tif (fmt) {\\n\\t\\t\\t\\t\\t\\tformat_object = getFormatObjectFromString(fmt, columnSummary[0].format?.valueType);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tformat_object = columnSummary[0].format;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow Error(\\n\\t\\t\\t\\t\\t\\t'No data provided. If you referenced a query result, check that the name is correct.'\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} catch (e) {\\n\\t\\t\\terror = e.message;\\n\\t\\t\\tconst setTextRed = '\\\\x1b[31m%s\\\\x1b[0m';\\n\\t\\t\\tconsole.error(setTextRed, \`Error in Value: \${error}\`);\\n\\t\\t\\tif (strictBuild) {\\n\\t\\t\\t\\tthrow error;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n<\/script>\\n\\n{#if placeholder}\\n\\t<span class=\\"placeholder\\"\\n\\t\\t>[{placeholder}]<span class=\\"error-msg\\">Placeholder: no data currently referenced.</span></span\\n\\t>\\n{:else if !error}\\n\\t<span style=\\"color: {fontColor}\\">\\n\\t\\t{formatValue(selected_value, format_object)}\\n\\t</span>\\n{:else}\\n\\t<ValueError {error} />\\n{/if}\\n\\n<style>\\n\\t.placeholder {\\n\\t\\tdisplay: inline;\\n\\t\\tposition: relative;\\n\\t\\tcursor: help;\\n\\t\\tcolor: var(--base-content-muted);\\n\\t}\\n\\n\\t.placeholder .error-msg {\\n\\t\\tdisplay: none;\\n\\t\\tposition: absolute;\\n\\t\\ttop: -5px;\\n\\t\\tleft: 105%;\\n\\t\\tmax-width: 400px;\\n\\t\\tmin-width: 150px;\\n\\t\\tpadding-left: 5px;\\n\\t\\tpadding-right: 5px;\\n\\t\\tpadding-top: 2px;\\n\\t\\tpadding-bottom: 1px;\\n\\t\\tfont-size: 0.8em;\\n\\t\\tcolor: var(--base-content);\\n\\t\\tbackground-color: var(--base-200);\\n\\t\\tborder: 1px solid var(--base-300);\\n\\t\\tborder-radius: 6px;\\n\\t\\tz-index: 1;\\n\\t\\tword-wrap: break-word;\\n\\t}\\n\\n\\t.placeholder:hover .error-msg {\\n\\t\\tdisplay: inline;\\n\\t}</style>\\n"],"names":[],"mappings":"AAmIC,0CAAa,CACZ,OAAO,CAAE,MAAM,CACf,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,oBAAoB,CAChC,CAEA,2BAAY,CAAC,yBAAW,CACvB,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,IAAI,CACV,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,GAAG,CAChB,cAAc,CAAE,GAAG,CACnB,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,IAAI,cAAc,CAAC,CAC1B,gBAAgB,CAAE,IAAI,UAAU,CAAC,CACjC,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,CACjC,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,UACZ,CAEA,2BAAY,MAAM,CAAC,yBAAW,CAC7B,OAAO,CAAE,MACV"}`},ft=M((i,t,e,R)=>{let u,o,l=$,m=()=>(l(),l=N(u,p=>o=p),u);const{resolveColor:s}=z();let{data:a=null}=t,{row:r=0}=t,{column:n=null}=t,{value:A=null}=t,{placeholder:x=null}=t,{fmt:w=void 0}=t,S,E,h,{color:C=void 0}=t,k="",{redNegatives:_=!1}=t,f;t.data===void 0&&e.data&&a!==void 0&&e.data(a),t.row===void 0&&e.row&&r!==void 0&&e.row(r),t.column===void 0&&e.column&&n!==void 0&&e.column(n),t.value===void 0&&e.value&&A!==void 0&&e.value(A),t.placeholder===void 0&&e.placeholder&&x!==void 0&&e.placeholder(x),t.fmt===void 0&&e.fmt&&w!==void 0&&e.fmt(w),t.color===void 0&&e.color&&C!==void 0&&e.color(C),t.redNegatives===void 0&&e.redNegatives&&_!==void 0&&e.redNegatives(_),i.css.add(At),n=n??A;try{if(h=void 0,!x)if(a){if(typeof a=="string")throw Error(`Received: data=${a}, expected: data={${a}}`);if(Array.isArray(a)||(a=[a]),isNaN(r))throw Error("row must be a number (row="+r+")");try{Object.keys(a[r])[0]}catch{throw Error("Row "+r+" does not exist in the dataset")}n=n??Object.keys(a[r])[0],G(a,[n]),f=Z(a,"array");const p=f.filter(v=>v.type==="date"&&!(a[0]?.[v.id]instanceof Date)).map(v=>v.id);for(let v=0;v<p.length;v++)a=nt(a,p[v]);E=a[r][n],f=f.filter(v=>v.id===n),w?S=st(w,f[0].format?.valueType):S=f[0].format}else throw Error("No data provided. If you referenced a query result, check that the name is correct.")}catch(p){h=p.message,console.error("\x1B[31m%s\x1B[0m",`Error in Value: ${h}`)}return A&&n&&console.warn('Both "value" and "column" were supplied as props to Value. "value" will be ignored.'),m(u=s(C)),_=_==="true"||_===!0,(_||o)&&(_&&E<0?k="rgb(220 38 38)":o&&(k=o)),l(),`${x?`<span class="placeholder svelte-1qvl5jp">[${T(x)}]<span class="error-msg svelte-1qvl5jp" data-svelte-h="svelte-ddarzq">Placeholder: no data currently referenced.</span></span>`:`${h?`${c(mt,"ValueError").$$render(i,{error:h},{},{})}`:`<span style="${"color: "+T(k,!0)}">${T(ct(E,S))}</span>`}`}`}),{Object:pt}=H;let ht="Value";const D=M((i,t,e,R)=>{let u,{data:o}=t,{column:l}=t,{agg:m}=t;const s=O.isQuery(o)?o.hash:void 0;let a=o?.hash===s,{emptySet:r=void 0}=t,{emptyMessage:n=void 0}=t;return t.data===void 0&&e.data&&o!==void 0&&e.data(o),t.column===void 0&&e.column&&l!==void 0&&e.column(l),t.agg===void 0&&e.agg&&m!==void 0&&e.agg(m),t.emptySet===void 0&&e.emptySet&&r!==void 0&&e.emptySet(r),t.emptyMessage===void 0&&e.emptyMessage&&n!==void 0&&e.emptyMessage(n),m&&(o=o.groupBy(void 0).agg({[m]:{col:l,as:l}})),a=o?.hash===s,u=Object.fromEntries(Object.entries(t).filter(([,A])=>A!==void 0)),` ${c(P,"QueryLoad").$$render(i,{data:o},{},{skeleton:()=>'<span slot="skeleton" class="text-base-content-muted" data-svelte-h="svelte-89gxhc">Loading...</span>',empty:()=>`<span slot="empty">${u.placeholder?"":`${c(q,"EmptyChart").$$render(i,{emptyMessage:n,emptySet:r,chartType:ht,isInitial:a},{},{})}`}</span>`,default:({loaded:A})=>`${c(ft,"Value").$$render(i,pt.assign({},u,{data:O.isQuery(A)?Array.from(A):A}),{},{default:()=>`${R.default?R.default({}):""}`})}`})}`}),{Object:Ct}=H;let St="Sparkline";const Et=M((i,t,e,R)=>{let u,{data:o}=t;const l=O.isQuery(o)?o.hash:void 0;let m=o?.hash===l,{emptySet:s=void 0}=t,{emptyMessage:a=void 0}=t,r=o?.id;return t.data===void 0&&e.data&&o!==void 0&&e.data(o),t.emptySet===void 0&&e.emptySet&&s!==void 0&&e.emptySet(s),t.emptyMessage===void 0&&e.emptyMessage&&a!==void 0&&e.emptyMessage(a),m=o?.hash===l,u={...Object.fromEntries(Object.entries(t).filter(([,n])=>n!==void 0))},` ${c(P,"QueryLoad").$$render(i,{data:o},{},{error:({loaded:n})=>`${c(dt,"ErrorChart").$$render(i,{slot:"error",title:St,error:n.error.message},{},{})}`,empty:()=>`${c(q,"EmptyChart").$$render(i,{slot:"empty",emptyMessage:a,emptySet:s,chartType:u.chartType,isInitial:m},{},{})}`,default:({loaded:n})=>`${c(_t,"Sparkline").$$render(i,Ct.assign({},u,{data:O.isQuery(n)?Array.from(n):n},{queryID:r}),{},{default:()=>`${R.default?R.default({}):""}`})}`})}`}),gt=M((i,t,e,R)=>{let u;const{resolveColor:o}=z();let{data:l}=t,{value:m=null}=t,{comparison:s=null}=t,{comparisonDelta:a=!0}=t,{sparkline:r=null}=t,{sparklineType:n="line"}=t,{sparklineColor:A=void 0}=t,{sparklineValueFmt:x=void 0}=t,{sparklineDateFmt:w=void 0}=t,{sparklineYScale:S=!1}=t,{connectGroup:E=void 0}=t,{fmt:h=void 0}=t,{comparisonFmt:C=void 0}=t,{title:k=null}=t,{comparisonTitle:_=null}=t,{downIsGood:f=!1}=t,{neutralMin:p=0}=t,{neutralMax:v=0}=t,{maxWidth:b="none"}=t,{minWidth:I="18%"}=t,{link:B=null}=t,y;t.data===void 0&&e.data&&l!==void 0&&e.data(l),t.value===void 0&&e.value&&m!==void 0&&e.value(m),t.comparison===void 0&&e.comparison&&s!==void 0&&e.comparison(s),t.comparisonDelta===void 0&&e.comparisonDelta&&a!==void 0&&e.comparisonDelta(a),t.sparkline===void 0&&e.sparkline&&r!==void 0&&e.sparkline(r),t.sparklineType===void 0&&e.sparklineType&&n!==void 0&&e.sparklineType(n),t.sparklineColor===void 0&&e.sparklineColor&&A!==void 0&&e.sparklineColor(A),t.sparklineValueFmt===void 0&&e.sparklineValueFmt&&x!==void 0&&e.sparklineValueFmt(x),t.sparklineDateFmt===void 0&&e.sparklineDateFmt&&w!==void 0&&e.sparklineDateFmt(w),t.sparklineYScale===void 0&&e.sparklineYScale&&S!==void 0&&e.sparklineYScale(S),t.connectGroup===void 0&&e.connectGroup&&E!==void 0&&e.connectGroup(E),t.fmt===void 0&&e.fmt&&h!==void 0&&e.fmt(h),t.comparisonFmt===void 0&&e.comparisonFmt&&C!==void 0&&e.comparisonFmt(C),t.title===void 0&&e.title&&k!==void 0&&e.title(k),t.comparisonTitle===void 0&&e.comparisonTitle&&_!==void 0&&e.comparisonTitle(_),t.downIsGood===void 0&&e.downIsGood&&f!==void 0&&e.downIsGood(f),t.neutralMin===void 0&&e.neutralMin&&p!==void 0&&e.neutralMin(p),t.neutralMax===void 0&&e.neutralMax&&v!==void 0&&e.neutralMax(v),t.maxWidth===void 0&&e.maxWidth&&b!==void 0&&e.maxWidth(b),t.minWidth===void 0&&e.minWidth&&I!==void 0&&e.minWidth(I),t.link===void 0&&e.link&&B!==void 0&&e.link(B),a=a==="true"||a===!0,u=o(A),S=S==="true"||S===!0,f=f==="true"||f===!0;try{if(y=void 0,!m)throw new Error("value is required");Array.isArray(l)||(l=[l]),G(l,[m]);let V=Z(l,"array"),W=V.find(F=>F.id===m);if(k=k??(W?W.title:null),s){G(l,[s]);let F=V.find(J=>J.id===s);_=_??(F?F.title:null)}if(r&&(G(l,[r]),V.find(F=>F.id===r)?.type!=="date"))throw Error("sparkline must be a date column")}catch(V){y=V,console.error("\x1B[31m%s\x1B[0m",`Error in Big Value: ${y.message}`)}return`<div class="inline-block font-sans pt-2 pb-3 pr-3 pl-0 mr-3 items-center align-top"${g("style",`
        min-width: ${I};
        max-width: ${b};
    `,0)}>${y?`${c(X,"BigValueError").$$render(i,{chartType:"Big Value",error:y.message},{},{})}`:`<p class="text-sm">${T(k)}</p> <div class="relative text-xl font-medium my-0.5">${B?`<a class="hover:bg-base-200"${g("href",Q(B),0)}>${c(D,"Value").$$render(i,{data:l,column:m,fmt:h},{},{})}</a>`:`${c(D,"Value").$$render(i,{data:l,column:m,fmt:h},{},{})}`} ${r?`${c(Et,"Sparkline").$$render(i,{height:"15",data:l,dateCol:r,valueCol:m,type:n,interactive:"true",color:u,valueFmt:h??x,dateFmt:w,yScale:S,connectGroup:E},{},{})}`:""}</div> ${s?`${a?`<p class="text-xs font-sans">${c(yt,"Delta").$$render(i,{data:l,column:s,fmt:C,fontClass:"text-xs",symbolPosition:"left",neutralMin:p,neutralMax:v,text:_,downIsGood:f},{},{})}</p>`:`<p class="text-xs font-sans /60 pt-[0.5px]">${B?`<a class="hover:bg-base-200"${g("href",Q(B),0)}>${c(D,"Value").$$render(i,{data:l,column:s,fmt:C},{},{})}</a>`:`${c(D,"Value").$$render(i,{data:l,column:s,fmt:C},{},{})}`} <span>${T(_)}</span></p>`}`:""}`}</div>`}),{Object:xt}=H;let wt="Big Value";const K=M((i,t,e,R)=>{let u,{data:o}=t;const l=O.isQuery(o)?o.hash:void 0;let m=o?.hash===l,{emptySet:s=void 0}=t,{emptyMessage:a=void 0}=t;return t.data===void 0&&e.data&&o!==void 0&&e.data(o),t.emptySet===void 0&&e.emptySet&&s!==void 0&&e.emptySet(s),t.emptyMessage===void 0&&e.emptyMessage&&a!==void 0&&e.emptyMessage(a),m=o?.hash===l,u=Object.fromEntries(Object.entries(t).filter(([,r])=>r!==void 0)),` ${c(P,"QueryLoad").$$render(i,{data:o},{},{skeleton:({loaded:r})=>`<div class="inline-block font-sans pt-2 pb-3 pr-3 pl-0 mr-3 items-center align-top"${g("style",`
			min-width: ${t.minWidth};
			max-width: ${t.maxWidth};
		`,0)} slot="skeleton"><p class="text-sm">${T(t.title??" ")}</p> ${c(D,"Value").$$render(i,{column:t.value,fmt:t.fmt,data:r},{},{})}</div>`,empty:()=>`<div slot="empty" class="inline-block font-sans pt-2 pb-3 pr-3 pl-0 mr-3 items-center align-top"${g("style",`
				min-width: ${t.minWidth};
				max-width: ${t.maxWidth};
		`,0)}>${c(q,"EmptyChart").$$render(i,{emptyMessage:a,emptySet:s,chartType:wt,isInitial:m},{},{})}</div>`,error:({loaded:r})=>`<div slot="error" class="inline-block font-sans pt-2 pb-3 pr-3 pl-0 mr-3 items-center align-top"${g("style",`
				min-width: ${t.minWidth};
				max-width: ${t.maxWidth};
		`,0)}>${c(X,"BigValueError").$$render(i,{error:r.error.message},{},{})}</div>`,default:({loaded:r})=>` ${c(gt,"InnerBigValue").$$render(i,xt.assign({},u,{data:O.isQuery(r)?Array.from(r):r}),{},{default:()=>`${R.default?R.default({}):""}`})}`})}`}),d={title:"Goals"},ee=M((i,t,e,R)=>{let u,o,l,m;o=N(lt,y=>u=y),m=N(U,y=>l=y);let{data:s}=t,{data:a={},customFormattingSettings:r,__db:n,inputs:A}=s;tt(U,l="4a7ae2373c29fec8d7c201e6ade90cb9",l);let x=at(ot(A));Y(x.subscribe(y=>A=y)),et(vt,{getCustomFormats:()=>r.customFormats||[]}),Y(()=>O.emptyCache());const w=(y,V)=>it(n.query,y,{query_name:V});ut(w),u.params;let S={initialData:void 0,initialError:void 0},E=j`SELECT 
      activity_month
      , activity_year
      , sport_type
      , sum(activities_cnt)    AS activities_cnt
      , sum(total_distance)    AS total_distance_month
      , sum(total_moving_time) AS total_moving_time
      , sum(total_distance_month) over (partition by activity_year, sport_type) AS total_distance_year
    FROM strava_source.activities_by_day
    WHERE sport_type = 'Run'
    GROUP BY 1, 2, 3
    ORDER BY activity_month DESC`,h=`SELECT 
      activity_month
      , activity_year
      , sport_type
      , sum(activities_cnt)    AS activities_cnt
      , sum(total_distance)    AS total_distance_month
      , sum(total_moving_time) AS total_moving_time
      , sum(total_distance_month) over (partition by activity_year, sport_type) AS total_distance_year
    FROM strava_source.activities_by_day
    WHERE sport_type = 'Run'
    GROUP BY 1, 2, 3
    ORDER BY activity_month DESC`,C,k=!1;const _=O.createReactive({callback:y=>{C=y},execFn:w},{id:"all_activities_by_month",...S});_(h,{noResolve:E,...S}),globalThis[Symbol.for("all_activities_by_month")]={get value(){return C}};let f={initialData:void 0,initialError:void 0},p=j`SELECT 
      activity_year
      , sport_type
      , sum(activities_cnt)    AS activities_cnt
      , sum(total_distance)    AS total_distance
      , sum(total_moving_time) AS total_moving_time
    FROM strava_source.activities_by_day
    WHERE sport_type = 'Run'
    GROUP BY 1, 2
    ORDER BY activity_year DESC`,v=`SELECT 
      activity_year
      , sport_type
      , sum(activities_cnt)    AS activities_cnt
      , sum(total_distance)    AS total_distance
      , sum(total_moving_time) AS total_moving_time
    FROM strava_source.activities_by_day
    WHERE sport_type = 'Run'
    GROUP BY 1, 2
    ORDER BY activity_year DESC`,b,I=!1;const B=O.createReactive({callback:y=>{b=y},execFn:w},{id:"all_activities_by_year",...f});return B(v,{noResolve:p,...f}),globalThis[Symbol.for("all_activities_by_year")]={get value(){return b}},Y(x.subscribe(y=>{})),t.data===void 0&&e.data&&s!==void 0&&e.data(s),{data:a={},customFormattingSettings:r,__db:n}=s,rt.set(Object.keys(a).length>0),u.params,E=j`SELECT 
      activity_month
      , activity_year
      , sport_type
      , sum(activities_cnt)    AS activities_cnt
      , sum(total_distance)    AS total_distance_month
      , sum(total_moving_time) AS total_moving_time
      , sum(total_distance_month) over (partition by activity_year, sport_type) AS total_distance_year
    FROM strava_source.activities_by_day
    WHERE sport_type = 'Run'
    GROUP BY 1, 2, 3
    ORDER BY activity_month DESC`,h=`SELECT 
      activity_month
      , activity_year
      , sport_type
      , sum(activities_cnt)    AS activities_cnt
      , sum(total_distance)    AS total_distance_month
      , sum(total_moving_time) AS total_moving_time
      , sum(total_distance_month) over (partition by activity_year, sport_type) AS total_distance_year
    FROM strava_source.activities_by_day
    WHERE sport_type = 'Run'
    GROUP BY 1, 2, 3
    ORDER BY activity_month DESC`,E||!k?E||(_(h,{noResolve:E,...S}),k=!0):_(h,{noResolve:E}),p=j`SELECT 
      activity_year
      , sport_type
      , sum(activities_cnt)    AS activities_cnt
      , sum(total_distance)    AS total_distance
      , sum(total_moving_time) AS total_moving_time
    FROM strava_source.activities_by_day
    WHERE sport_type = 'Run'
    GROUP BY 1, 2
    ORDER BY activity_year DESC`,v=`SELECT 
      activity_year
      , sport_type
      , sum(activities_cnt)    AS activities_cnt
      , sum(total_distance)    AS total_distance
      , sum(total_moving_time) AS total_moving_time
    FROM strava_source.activities_by_day
    WHERE sport_type = 'Run'
    GROUP BY 1, 2
    ORDER BY activity_year DESC`,p||!I?p||(B(v,{noResolve:p,...f}),I=!0):B(v,{noResolve:p}),o(),m(),`  ${typeof d<"u"&&d.title&&d.hide_title!==!0?`<h1 class="title">${T(d.title)}</h1>`:""} ${i.head+=`<!-- HEAD_svelte-6lktun_START -->${typeof d<"u"&&d.title?`${i.title=`<title>${T(d.title)}</title>`,""} <meta property="og:title"${g("content",d.og?.title??d.title,0)}> <meta name="twitter:title"${g("content",d.og?.title??d.title,0)}>`:` ${i.title="<title>Evidence</title>",""}`}<meta name="twitter:card" content="summary"><meta name="twitter:site" content="@evidence_dev">${typeof d=="object"?`${d.description||d.og?.description?`<meta name="description"${g("content",d.description??d.og?.description,0)}> <meta property="og:description"${g("content",d.og?.description??d.description,0)}> <meta name="twitter:description"${g("content",d.og?.description??d.description,0)}>`:""} ${d.og?.image?`<meta property="og:image"${g("content",Q(d.og?.image),0)}> <meta name="twitter:image"${g("content",Q(d.og?.image),0)}>`:""}`:""}<!-- HEAD_svelte-6lktun_END -->`,""}   ${C?`${c(L,"QueryViewer").$$render(i,{queryID:"all_activities_by_month",queryResult:C},{},{})}`:""} ${b?`${c(L,"QueryViewer").$$render(i,{queryID:"all_activities_by_year",queryResult:b},{},{})}`:""} ${c(K,"BigValue").$$render(i,{data:C,link:"index",value:"total_distance_month",sparkline:"activity_month",comparison:"total_distance_month",comparisonFmt:"pct1",comparisonTitle:"vs. Last Month"},{},{})} ${c(K,"BigValue").$$render(i,{data:b,value:"total_distance",sparkline:"activity_year",comparison:"total_distance",comparisonFmt:"pct",comparisonTitle:"vs. Last Year"},{},{})} <p class="markdown">Total running distance last year was <b>${c(D,"Value").$$render(i,{data:b,column:"total_distance",row:"0",color:"#85BB65"},{},{})}km</b>. The goal for 2025 would be an additional 100km, so <b data-svelte-h="svelte-1a37sev">650km</b>! I&#39;ll set a pace to achieve.</p> <p class="markdown" data-svelte-h="svelte-k81rl6">TODO:</p> <ul class="markdown" data-svelte-h="svelte-gnpbc4"><li class="markdown">chart against staggered goals</li> <li class="markdown">Live Counter for month  + Use Alert? If/Else</li></ul>`});export{ee as default};
